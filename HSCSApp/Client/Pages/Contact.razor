@page "/contact"
@using System.Text.RegularExpressions
@layout HomePage
@inject IJSRuntime js

<section class="contact pb-4">
    <div class="left">
        <form action="">
            <a class="close-btn" onclick="msg()">
                <i class="fas fa-window-close"></i>
            </a>
            <h4 class="header">Contact Us</h4>
            <p class="contact-caption">We'd like to hear from you!</p>
            <!--Row 1-->
            <div class="input-group">
                <div class="input-container _medium">
                    <input class="@nameInput" type="text" name="name" id="name" @bind="NameValue"
                           @onfocusout="Name_Invalid" required>
                    <label for="name">Full Name</label>
                    <small class="@nameSml">@smallNameValue</small>
                </div>
                <div class="input-container _medium">
                    <input class="@contactInput" type="text" name="contactNumber" id="contactNumber"
                           @bind="ContactValue" required @onfocusout="Contact_Invalid">
                    <label for="contactNumber">Contact Number</label>
                    <small class="@contactSml">@smallContactValue</small>
                </div>
            </div>

            <!--Row 2-->
            <div class="input-group">
                <div class="input-container _medium">
                    <input class="@emailInput" type="email" name="email" id="email" @bind="EmailValue"
                           @onfocusout="Email_Invalid" required>
                    <label class="@emailLbl" for="email">Email Address</label>
                    <small class="@emailSml">@smallServiceValue</small>
                </div>

                <!--PLEASE STUDY DICTIONARY-->
                <div class="input-container _medium">
                    <select name="service" id="service" required @bind="ServiceValue" @onfocusout="Service_Invalid">
                        <option value="" hidden></option>
                        <option value="1">Planning & Design</option>
                        <option value="2">Construction</option>
                        <option value="3">Renovation</option>
                        <option value="4">Electrical</option>
                        <option value="5">Electronics</option>
                        <option value="6">Mechanical</option>
                        <option value="7">Plumbing</option>
                        <option value="8">Consultation</option>
                    </select>
                    <label for="service">Service</label>
                    <small class="@serviceSml">Required field</small>
                </div>
            </div>
            <div class="input-group">
                <div class="input-container _large">
                    <textarea class="messageInput" name="textarea" id="textarea" required @bind="MessageValue"
                              @onfocusout="Msg_Invalid" spellcheck="true"></textarea>
                    <label for="textarea">Message</label>
                    <small class="@messageSml">@smallMsgValue</small>
                </div>
            </div>

            <div class="input-group" style="justify-content: flex-end;">
                @if (formValid)
                {
                    <button class="btn btn-outline-primary" type="button" @onclick="ContactUs_Btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                }
                else
                {
                    <button class="btn btn-outline-secondary" disabled>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                }
            </div>
        </form>
    </div>
    <div class="right">
    </div>

    <div class="@modal">
        <div class="_modal-content">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close_Modal">
                <span aria-hidden="true">&times;</span>
            </button>
            <div class="_modal-header">
                <h4 class="_modal-title">
                    Contact Us
                </h4>
            </div>
            <div class="_modal-body">
                <p>
                    Are you sure you want to cancel?
                    <br>
                    You will be redirected to Home Page.
                </p>
            </div>
            <div class="_modal-footer">
                <button class="btn btn-danger" type="button" @onclick="Clear_FormValue">Ok</button>
            </div>
            <p class="_modal-slogan">
                Hopestone Construction Service
            </p>
        </div>
    </div>
</section>

@code {

    private string NameValue;
    private string ContactValue;
    private string EmailValue;
    private string ServiceValue;
    private string MessageValue;

    //Label
    private string nameLbl = string.Empty;
    private string contactLbl = string.Empty;
    private string emailLbl = string.Empty;
    private string serviceLbl = string.Empty;
    private string messageLbl = string.Empty;

    //Input
    private string nameInput = string.Empty;
    private string contactInput = string.Empty;
    private string emailInput = string.Empty;
    private string serviceInput = string.Empty;
    private string messageInput = string.Empty;

    //Small
    private string nameSml = string.Empty;
    private string contactSml = string.Empty;
    private string emailSml = string.Empty;
    private string serviceSml = string.Empty;
    private string messageSml = string.Empty;

    //Small Alert Value
    private string smallNameValue = string.Empty;
    private string smallContactValue = string.Empty;
    private string smallEmailValue = string.Empty;
    private string smallServiceValue = string.Empty;
    private string smallMsgValue = string.Empty;

    //Valid Status
    private bool nameValid;
    private bool contactValid;
    private bool emailValid;
    private bool msgValid;
    private bool formValid = false;

    //Modal
    private string modal = "_modal";

    private void Email_Invalid()
    {

        var _emailValue = EmailValue;

        if (!string.IsNullOrWhiteSpace(_emailValue))
        {
            _emailValue.Trim();

            if ((_emailValue.Contains(' ')) ||
            (_emailValue.EndsWith("@.com")) ||
            !(_emailValue.Contains('@')) ||
            !(_emailValue.EndsWith(".com")))
            {
                emailLbl = "_invalid";
                emailInput = "_invalid-input";
                emailSml = "small-show";

                emailValid = false;
            }
            else
            {
                emailLbl = "_invalid";
                emailInput = "_valid-input";
                emailSml = "_valid-small";
                emailValid = true;
            }
        }
        else if (string.IsNullOrEmpty(_emailValue))
        {
            //If empty or whitespace
            emailInput = "_valid-input";
            emailSml = "_valid-small";
            emailLbl = "_valid-label";

            emailValid = true;

        }

    }

    private void Name_Invalid()
    {
        var _nameValue = NameValue;

        if (!string.IsNullOrWhiteSpace(_nameValue))
        {
            string _trimmedName = _nameValue.Trim();

            string[] _arrayName = _trimmedName.Split(" ");

            //for (int i = 0; i < _arrayName.Length; i++)
            //{
            //  Console.WriteLine(_arrayName[].ToString());
            //}

            foreach (var array in _arrayName)
            {
                foreach (var i in array)
                {
                    Console.WriteLine(i);

                }
                //var _array = array[0].ToString().Replace("f", "F");
                //Console.WriteLine(_array);

            }

            //foreach (var i in _arrayName)
            //{
            //    var upperChar = i[0].ToString();
            //    Console.WriteLine(upperChar.ToUpper());

            //}

            if (_nameValue.Length <= 3)
            {
                smallNameValue = "Name too short";
                nameLbl = "_invalid";
                nameInput = "_invalid-input";
                nameSml = "small-show";

                nameValid = false;
            }
            else
            {
                Regex rgx = new Regex(@"^[ A-Za-z0-9]$");
                @* bool containsSpecialChar = _trimmedName.Any(char.IsSymbol); *@
                bool containsSpecialChar = rgx.IsMatch(_trimmedName);
                bool containsNumber = _trimmedName.Any(char.IsDigit);
                if (containsSpecialChar || containsNumber)
                {
                    smallNameValue = "Invalid (No number & character)";
                    nameLbl = "_invalid";
                    nameInput = "_invalid-input";
                    nameSml = "small-show";

                    nameValid = false;
                }
                else
                {
                    nameLbl = "_invalid";
                    nameInput = "_valid-input";
                    nameSml = "_valid-small";
                    nameValid = true;

                    NameValue = _trimmedName;
                }
            }
        }
        else if (string.IsNullOrEmpty(_nameValue))
        {
            //If empty or whitespace

            nameInput = "_valid-input";
            nameSml = "_valid-small";
            nameLbl = "_valid-label";

            nameValid = true;

        }

    }

    private void Contact_Invalid()
    {

        var _contactValue = ContactValue;

        if (!string.IsNullOrWhiteSpace(_contactValue))
        {
            var _trimmedContact = _contactValue.Trim();

            if (_trimmedContact.Length >= 7)
            {
                bool containsNumber = _trimmedContact.All(char.IsDigit);

                if (containsNumber)
                {
                    contactInput = "_valid-input";
                    contactSml = "_valid-small";
                    contactLbl = "_valid-label";
                    contactValid = true;
                }
                else
                {
                    smallContactValue = "Invalid contact number";
                    contactLbl = "_invalid";
                    contactInput = "_invalid-input";
                    contactSml = "small-show";

                    contactValid = false;
                }
            }
            else
            {
                smallContactValue = "Invalid contact number";
                contactLbl = "_invalid";
                contactInput = "_invalid-input";
                contactSml = "small-show";

                contactValid = false;
            }
        }
        else if (string.IsNullOrEmpty(_contactValue))
        {
            //If empty or whitespace

            contactInput = "_valid-input";
            contactSml = "_valid-small";
            contactLbl = "_valid-label";

            contactValid = true;

        }

    }
    private void Service_Invalid()
    {

        var _serviceValue = ServiceValue;

        if (!string.IsNullOrWhiteSpace(_serviceValue))
        {
            serviceInput = "_valid-input";
            serviceSml = "_valid-small";
            serviceLbl = "_valid-label";
        }
        else if (string.IsNullOrEmpty(_serviceValue))
        {
            //If empty or whitespace

            serviceInput = "_valid-input";
            serviceSml = "_valid-small";
            serviceLbl = "_valid-label";
        }

    }
    private void Msg_Invalid()
    {

        var _messageValue = MessageValue;

        if (!string.IsNullOrWhiteSpace(_messageValue))
        {
            string _trimmedMsg = _messageValue.Trim();

            if (_trimmedMsg.Length < 10)
            {
                smallMsgValue = "Message too short.";
                messageLbl = "_invalid";
                messageInput = "_invalid-input";
                messageSml = "small-show";

                msgValid = false;
            }
            else
            {
                messageLbl = "_invalid";
                messageInput = "_valid-input";
                messageSml = "_valid-small";
                msgValid = true;
            }
        }
        else if (string.IsNullOrEmpty(_messageValue))
        {
            //If empty or whitespace

            messageInput = "_valid-input";
            messageSml = "_valid-small";
            messageLbl = "_valid-label";

            msgValid = true;

        }

    }

    private bool Form_Valid()
    {
        if ((!nameValid) ||
        (!contactValid) ||
        (!emailValid) ||
        (!msgValid)
        )
        {
            return formValid = false;
        }
        else
        {
            return formValid = true;
        }
    }

    private void ContactUs_Btn()
    {
        if (Form_Valid())
        {
            System.Console.WriteLine("valid");
        }
        else
        {
            System.Console.WriteLine("Invalid");
        }
    }
    private void Clear_Form()
    {
        if (
        !(string.IsNullOrEmpty(NameValue)) ||
        !(string.IsNullOrEmpty(ContactValue)) ||
        !(string.IsNullOrEmpty(EmailValue)) ||
        !(string.IsNullOrEmpty(ServiceValue)) ||
        !(string.IsNullOrEmpty(MessageValue))
        )
        {
            modal = "_modal show";
        }

    }

    private void Clear_FormValue()
    {
        NameValue = string.Empty;
        ContactValue = string.Empty;
        EmailValue = string.Empty;
        ServiceValue = string.Empty;
        MessageValue = string.Empty;

        modal = "_modal";
    }

    private void Close_Modal()
    {
        modal = "_modal";
    }

    private void StringToProper(params string[] name)
    {

    }
}